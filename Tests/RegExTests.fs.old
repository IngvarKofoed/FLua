namespace ParserTests
open System
open NUnit.Framework
open Parser.RegularExpression


[<TestFixture>]
type RegEx() = 

    static member validData =
        [
            // Escape tests

            // Concatination tests
            TestCaseData("a" |> List.ofSeq).Returns(Char('a')).SetName("a");
            TestCaseData("ab" |> List.ofSeq).Returns(Concatination(Char('a'), Char('b'))).SetName("ab");
            TestCaseData("abc" |> List.ofSeq).Returns(Concatination(Char('a'), Concatination(Char('b'), Char('c')))).SetName("abc");

            // Group tests
            TestCaseData("(a)" |> List.ofSeq).Returns(Group(Char('a'))).SetName("(a)");
            TestCaseData("(ab)" |> List.ofSeq).Returns(Group(Concatination(Char('a'), Char('b')))).SetName("(ab)");
            TestCaseData("(a(b))" |> List.ofSeq).Returns(Group(Concatination(Char('a'), Group(Char('b'))))).SetName("(a(b))")
            TestCaseData("(a)(b)" |> List.ofSeq).Returns(Concatination(Group(Char('a')), Group(Char('b')))).SetName("(a)(b)");

            // Choise tests
            TestCaseData("a|b" |> List.ofSeq).Returns(Choise(Char('a'), Char('b'))).SetName("a|b");
            TestCaseData("ac|bd" |> List.ofSeq).Returns(Choise(Concatination(Char('a'), Char('c')), Concatination(Char('b'), Char('d')))).SetName("ac|bd");
            TestCaseData("a|b|c" |> List.ofSeq).Returns(Choise(Char('a'), Choise(Char('b'), Char('c')))).SetName("a|b|c");

            // Group+Choise tests
            TestCaseData("(a)|(b)" |> List.ofSeq).Returns(Choise(Group(Char('a')), Group(Char('b')))).SetName("(a)|(b)");
            TestCaseData("(a|b)" |> List.ofSeq).Returns(Group(Choise(Char('a'), Char('b')))).SetName("(a|b)");

            // Star tests

            // Plus tests
        ]

    [<Test>]
    [<TestCaseSource(typedefof<RegEx>, "validData")>]
    member x.TestCase data =
        parse data
       